
AVRASM ver. 2.1.30  F:\AVR Projects\Counter\Debug\List\main.asm Sun Aug 17 14:26:21 2025

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8A
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c02e      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 _tbl10_G100:
000013 2710
000014 03e8
000015 0064
000016 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000017 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000018 1000
000019 0100
00001a 0010
00001b 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
00001c 0000
00001d 0000
00001e 0000
00001f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000020 063f
000021 4f5b
000022 6d66
000023 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
000024 6f7f      	.DB  0x7F,0x6F
                 _0x2020060:
F:\AVR Projects\Counter\Debug\List\main.asm(1123): warning: .cseg .db misalignment - padding zero byte
000025 0001      	.DB  0x1
                 _0x2020000:
000026 4e2d
000027 4e41
000028 4900
000029 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
F:\AVR Projects\Counter\Debug\List\main.asm(1126): warning: .cseg .db misalignment - padding zero byte
00002a 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00002b 0001      	.DW  0x01
00002c 0160      	.DW  __seed_G101
00002d 004a      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
00002e 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00002f 94f8      	CLI
000030 27ee      	CLR  R30
000031 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000032 e0f1      	LDI  R31,1
000033 bffb      	OUT  GICR,R31
000034 bfeb      	OUT  GICR,R30
000035 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000036 e08d      	LDI  R24,(14-2)+1
000037 e0a2      	LDI  R26,2
000038 27bb      	CLR  R27
                 __CLEAR_REG:
000039 93ed      	ST   X+,R30
00003a 958a      	DEC  R24
00003b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00003c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00003d e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00003e e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00003f 93ed      	ST   X+,R30
000040 9701      	SBIW R24,1
000041 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000042 e5e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000043 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000044 9185      	LPM  R24,Z+
000045 9195      	LPM  R25,Z+
000046 9700      	SBIW R24,0
000047 f061      	BREQ __GLOBAL_INI_END
000048 91a5      	LPM  R26,Z+
000049 91b5      	LPM  R27,Z+
00004a 9005      	LPM  R0,Z+
00004b 9015      	LPM  R1,Z+
00004c 01bf      	MOVW R22,R30
00004d 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00004e 9005      	LPM  R0,Z+
00004f 920d      	ST   X+,R0
000050 9701      	SBIW R24,1
000051 f7e1      	BRNE __GLOBAL_INI_LOOP
000052 01fb      	MOVW R30,R22
000053 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000054 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000055 bfed      	OUT  SPL,R30
000056 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000057 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000058 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000059 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00005a c000      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;#include <stdlib.h>
                 ;
                 ;#define one     PINB.0 == 0
                 ;#define two     PINB.1 == 0
                 ;#define three   PINB.2 == 0
                 ;
                 ;#define RED_on      PORTB.3 = 0;
                 ;#define GREEN_on    PORTB.4 = 0;
                 ;#define BLUE_on     PORTB.5 = 0;
                 ;#define RED_off      PORTB.3 = 1;
                 ;#define GREEN_off    PORTB.4 = 1;
                 ;#define BLUE_off     PORTB.5 = 1;
                 ;
                 ;eeprom unsigned int a;
                 ;
                 ;void main(void)
                 ; 0000 0014 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0015 unsigned char seg[10]={0b00111111,0b00000110,0b01011011,0b01001111,0b01100110,0b01101101,0b01111101,0b00000111,0b0111111 ...
                 ; 0000 0016 int x = 0,r = 0,c = 1;
                 ; 0000 0017 int hezargan = 0;
                 ; 0000 0018 int sadgan = 0;
                 ; 0000 0019 int dahgan = 0;
                 ; 0000 001A int yekan = 0;
                 ; 0000 001B 
                 ; 0000 001C if(a==0xFFFF)
00005b 9762      	SBIW R28,18
00005c e182      	LDI  R24,18
00005d e0a0      	LDI  R26,LOW(0)
00005e e0b0      	LDI  R27,HIGH(0)
00005f e3e8      	LDI  R30,LOW(_0x3*2)
000060 e0f0      	LDI  R31,HIGH(_0x3*2)
000061 d178      	RCALL __INITLOCB
                 ;	seg -> Y+8
                 ;	x -> R16,R17
                 ;	r -> R18,R19
                 ;	c -> R20,R21
                 ;	hezargan -> Y+6
                 ;	sadgan -> Y+4
                 ;	dahgan -> Y+2
                 ;	yekan -> Y+0
                +
000062 e000     +LDI R16 , LOW ( 0 )
000063 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000064 e020     +LDI R18 , LOW ( 0 )
000065 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
000066 e041     +LDI R20 , LOW ( 1 )
000067 e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
000068 d0ee      	RCALL SUBOPT_0x0
000069 d147      	RCALL __EEPROMRDW
00006a 3fef      	CPI  R30,LOW(0xFFFF)
00006b efaf      	LDI  R26,HIGH(0xFFFF)
00006c 07fa      	CPC  R31,R26
00006d f421      	BRNE _0x4
                 ; 0000 001D  {
                 ; 0000 001E     a = 0x0000;
00006e d0e8      	RCALL SUBOPT_0x0
00006f e0e0      	LDI  R30,LOW(0)
000070 e0f0      	LDI  R31,HIGH(0)
000071 d14f      	RCALL __EEPROMWRW
                 ; 0000 001F  }
                 ; 0000 0020 // Port B initialization : Bit7=In Bit6=In Bit5=Out Bit4=Out Bit3=Out Bit2=In Bit1=In Bit0=In
                 ; 0000 0021 DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
                 _0x4:
000072 e3e8      	LDI  R30,LOW(56)
000073 bbe7      	OUT  0x17,R30
                 ; 0000 0022 // State: Bit7=P Bit6=P Bit5=1 Bit4=1 Bit3=1 Bit2=P Bit1=P Bit0=P
                 ; 0000 0023 PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
000074 efef      	LDI  R30,LOW(255)
000075 bbe8      	OUT  0x18,R30
                 ; 0000 0024 
                 ; 0000 0025 // Port C initialization : Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0026 DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
000076 e0ef      	LDI  R30,LOW(15)
000077 bbe4      	OUT  0x14,R30
                 ; 0000 0027 // State: Bit6=P Bit5=P Bit4=P Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0028 PORTC=(1<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000078 e7e0      	LDI  R30,LOW(112)
000079 bbe5      	OUT  0x15,R30
                 ; 0000 0029 
                 ; 0000 002A // Port D initialization : Bit7=In Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 002B DDRD=(0<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
00007a e7ef      	LDI  R30,LOW(127)
00007b bbe1      	OUT  0x11,R30
                 ; 0000 002C // State: Bit7=P Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 002D PORTD=(1<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00007c e8e0      	LDI  R30,LOW(128)
00007d bbe2      	OUT  0x12,R30
                 ; 0000 002E 
                 ; 0000 002F while (1)
                 _0x5:
                 ; 0000 0030     {
                 ; 0000 0031       if (x == 0 && one)
00007e 2400      	CLR  R0
00007f 1600      	CP   R0,R16
000080 0601      	CPC  R0,R17
000081 f411      	BRNE _0x9
000082 9bb0      	SBIS 0x16,0
000083 c001      	RJMP _0xA
                 _0x9:
000084 c001      	RJMP _0x8
                 _0xA:
                 ; 0000 0032         {
                 ; 0000 0033             x = 1;
000085 d0d4      	RCALL SUBOPT_0x1
                 ; 0000 0034         }
                 ; 0000 0035       if (x == 1 && three)
                 _0x8:
000086 d0d6      	RCALL SUBOPT_0x2
000087 f411      	BRNE _0xC
000088 9bb2      	SBIS 0x16,2
000089 c001      	RJMP _0xD
                 _0xC:
00008a c001      	RJMP _0xB
                 _0xD:
                 ; 0000 0036         {
                 ; 0000 0037             x = 4;
00008b d0d6      	RCALL SUBOPT_0x3
                 ; 0000 0038         }
                 ; 0000 0039       if (x == 1 && two)
                 _0xB:
00008c d0d0      	RCALL SUBOPT_0x2
00008d f411      	BRNE _0xF
00008e 9bb1      	SBIS 0x16,1
00008f c001      	RJMP _0x10
                 _0xF:
000090 c002      	RJMP _0xE
                 _0x10:
                 ; 0000 003A         {
                 ; 0000 003B             x = 2;
                +
000091 e002     +LDI R16 , LOW ( 2 )
000092 e010     +LDI R17 , HIGH ( 2 )
                 	__GETWRN 16,17,2
                 ; 0000 003C         }
                 ; 0000 003D       if (x == 2 && three)
                 _0xE:
000093 d0d1      	RCALL SUBOPT_0x4
000094 f411      	BRNE _0x12
000095 9bb2      	SBIS 0x16,2
000096 c001      	RJMP _0x13
                 _0x12:
000097 c003      	RJMP _0x11
                 _0x13:
                 ; 0000 003E         {
                 ; 0000 003F             x = 1;
000098 d0c1      	RCALL SUBOPT_0x1
                 ; 0000 0040             r++;
                +
000099 5f2f     +SUBI R18 , LOW ( - 1 )
00009a 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0000 0041         }
                 ; 0000 0042       if (x == 2 && one)
                 _0x11:
00009b d0c9      	RCALL SUBOPT_0x4
00009c f411      	BRNE _0x15
00009d 9bb0      	SBIS 0x16,0
00009e c001      	RJMP _0x16
                 _0x15:
00009f c001      	RJMP _0x14
                 _0x16:
                 ; 0000 0043         {
                 ; 0000 0044             x = 1;
0000a0 d0b9      	RCALL SUBOPT_0x1
                 ; 0000 0045         }
                 ; 0000 0046       if (x == 0 && three)
                 _0x14:
0000a1 2400      	CLR  R0
0000a2 1600      	CP   R0,R16
0000a3 0601      	CPC  R0,R17
0000a4 f411      	BRNE _0x18
0000a5 9bb2      	SBIS 0x16,2
0000a6 c001      	RJMP _0x19
                 _0x18:
0000a7 c001      	RJMP _0x17
                 _0x19:
                 ; 0000 0047         {
                 ; 0000 0048             x = 4;
0000a8 d0b9      	RCALL SUBOPT_0x3
                 ; 0000 0049         }
                 ; 0000 004A       if (x == 4 && one)
                 _0x17:
0000a9 d0c0      	RCALL SUBOPT_0x5
0000aa f411      	BRNE _0x1B
0000ab 9bb0      	SBIS 0x16,0
0000ac c001      	RJMP _0x1C
                 _0x1B:
0000ad c001      	RJMP _0x1A
                 _0x1C:
                 ; 0000 004B         {
                 ; 0000 004C             x = 1;
0000ae d0ab      	RCALL SUBOPT_0x1
                 ; 0000 004D         }
                 ; 0000 004E       if (x == 1 && three)
                 _0x1A:
0000af d0ad      	RCALL SUBOPT_0x2
0000b0 f411      	BRNE _0x1E
0000b1 9bb2      	SBIS 0x16,2
0000b2 c001      	RJMP _0x1F
                 _0x1E:
0000b3 c001      	RJMP _0x1D
                 _0x1F:
                 ; 0000 004F         {
                 ; 0000 0050             x = 4;
0000b4 d0ad      	RCALL SUBOPT_0x3
                 ; 0000 0051         }
                 ; 0000 0052       if (x == 4 && two)
                 _0x1D:
0000b5 d0b4      	RCALL SUBOPT_0x5
0000b6 f411      	BRNE _0x21
0000b7 9bb1      	SBIS 0x16,1
0000b8 c001      	RJMP _0x22
                 _0x21:
0000b9 c002      	RJMP _0x20
                 _0x22:
                 ; 0000 0053         {
                 ; 0000 0054             x = 5;
                +
0000ba e005     +LDI R16 , LOW ( 5 )
0000bb e010     +LDI R17 , HIGH ( 5 )
                 	__GETWRN 16,17,5
                 ; 0000 0055         }
                 ; 0000 0056       if (x == 5 && one)
                 _0x20:
0000bc d0b2      	RCALL SUBOPT_0x6
0000bd f411      	BRNE _0x24
0000be 9bb0      	SBIS 0x16,0
0000bf c001      	RJMP _0x25
                 _0x24:
0000c0 c003      	RJMP _0x23
                 _0x25:
                 ; 0000 0057         {
                 ; 0000 0058             x = 1;
0000c1 d098      	RCALL SUBOPT_0x1
                 ; 0000 0059             r--;
                +
0000c2 5021     +SUBI R18 , LOW ( 1 )
0000c3 4030     +SBCI R19 , HIGH ( 1 )
                 	__SUBWRN 18,19,1
                 ; 0000 005A         }
                 ; 0000 005B       if (x == 5 && three)
                 _0x23:
0000c4 d0aa      	RCALL SUBOPT_0x6
0000c5 f411      	BRNE _0x27
0000c6 9bb2      	SBIS 0x16,2
0000c7 c001      	RJMP _0x28
                 _0x27:
0000c8 c001      	RJMP _0x26
                 _0x28:
                 ; 0000 005C         {
                 ; 0000 005D             x = 4;
0000c9 d098      	RCALL SUBOPT_0x3
                 ; 0000 005E         }
                 ; 0000 005F 
                 ; 0000 0060       if (PINB.6 == 0)
                 _0x26:
0000ca 99b6      	SBIC 0x16,6
0000cb c003      	RJMP _0x29
                 ; 0000 0061         {
                 ; 0000 0062             a = r;
0000cc 01f9      	MOVW R30,R18
0000cd d089      	RCALL SUBOPT_0x0
0000ce d0f2      	RCALL __EEPROMWRW
                 ; 0000 0063         }
                 ; 0000 0064       if (PINB.7 == 0)
                 _0x29:
0000cf 99b7      	SBIC 0x16,7
0000d0 c004      	RJMP _0x2A
                 ; 0000 0065         {
                 ; 0000 0066             a = 100;
0000d1 d085      	RCALL SUBOPT_0x0
0000d2 e6e4      	LDI  R30,LOW(100)
0000d3 e0f0      	LDI  R31,HIGH(100)
0000d4 d0ec      	RCALL __EEPROMWRW
                 ; 0000 0067         }
                 ; 0000 0068       if (PINC.4 == 0)
                 _0x2A:
0000d5 999c      	SBIC 0x13,4
0000d6 c002      	RJMP _0x2B
                 ; 0000 0069         {
                 ; 0000 006A             r = 0;
                +
0000d7 e020     +LDI R18 , LOW ( 0 )
0000d8 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ; 0000 006B         }
                 ; 0000 006C       if (PINC.5 == 0)
                 _0x2B:
0000d9 999d      	SBIC 0x13,5
0000da c004      	RJMP _0x2C
                 ; 0000 006D         {
                 ; 0000 006E             a = 160;
0000db d07b      	RCALL SUBOPT_0x0
0000dc eae0      	LDI  R30,LOW(160)
0000dd e0f0      	LDI  R31,HIGH(160)
0000de d0e2      	RCALL __EEPROMWRW
                 ; 0000 006F         }
                 ; 0000 0070 
                 ; 0000 0071      if (r < a)
                 _0x2C:
0000df d077      	RCALL SUBOPT_0x0
0000e0 d0d0      	RCALL __EEPROMRDW
0000e1 172e      	CP   R18,R30
0000e2 073f      	CPC  R19,R31
0000e3 f418      	BRSH _0x2D
                 ; 0000 0072         {
                 ; 0000 0073             RED_off
0000e4 9ac3      	SBI  0x18,3
                 ; 0000 0074             BLUE_on
0000e5 98c5      	CBI  0x18,5
                 ; 0000 0075             GREEN_off
0000e6 c00d      	RJMP _0x75
                 ; 0000 0076         }
                 ; 0000 0077      else
                 _0x2D:
                 ; 0000 0078         {
                 ; 0000 0079           if (r == a)
0000e7 d08c      	RCALL SUBOPT_0x7
0000e8 f421      	BRNE _0x35
                 ; 0000 007A             {
                 ; 0000 007B                 GREEN_on
0000e9 98c4      	CBI  0x18,4
                 ; 0000 007C                 BLUE_off
0000ea 9ac5      	SBI  0x18,5
                 ; 0000 007D                 RED_off
0000eb 9ac3      	SBI  0x18,3
                 ; 0000 007E             }
                 ; 0000 007F           else
0000ec c008      	RJMP _0x3C
                 _0x35:
                 ; 0000 0080             {
                 ; 0000 0081               if (r > a)
0000ed d086      	RCALL SUBOPT_0x7
0000ee f418      	BRSH _0x3D
                 ; 0000 0082                 {
                 ; 0000 0083                     BLUE_off
0000ef 9ac5      	SBI  0x18,5
                 ; 0000 0084                     RED_on
0000f0 98c3      	CBI  0x18,3
                 ; 0000 0085                     GREEN_off
0000f1 c002      	RJMP _0x75
                 ; 0000 0086                 }
                 ; 0000 0087               else
                 _0x3D:
                 ; 0000 0088                 {
                 ; 0000 0089                     RED_off
0000f2 9ac3      	SBI  0x18,3
                 ; 0000 008A                     BLUE_off
0000f3 9ac5      	SBI  0x18,5
                 ; 0000 008B                     GREEN_off
                 _0x75:
0000f4 9ac4      	SBI  0x18,4
                 ; 0000 008C                 }
                 ; 0000 008D             }
                 _0x3C:
                 ; 0000 008E         }
                 ; 0000 008F 
                 ; 0000 0090       if (r > 9999)
                +
0000f5 3120     +CPI R18 , LOW ( 10000 )
0000f6 e2e7     +LDI R30 , HIGH ( 10000 )
0000f7 073e     +CPC R19 , R30
                 	__CPWRN 18,19,10000
0000f8 f014      	BRLT _0x4B
                 ; 0000 0091         {
                 ; 0000 0092             r = 0;
                +
0000f9 e020     +LDI R18 , LOW ( 0 )
0000fa e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ; 0000 0093         }
                 ; 0000 0094 
                 ; 0000 0095 
                 ; 0000 0096 
                 ; 0000 0097       hezargan=r/1000;
                 _0x4B:
0000fb 01d9      	MOVW R26,R18
0000fc eee8      	LDI  R30,LOW(1000)
0000fd e0f3      	LDI  R31,HIGH(1000)
0000fe d091      	RCALL __DIVW21
0000ff 83ee      	STD  Y+6,R30
000100 83ff      	STD  Y+6+1,R31
                 ; 0000 0098       sadgan=(r%1000)/100;
000101 01d9      	MOVW R26,R18
000102 eee8      	LDI  R30,LOW(1000)
000103 e0f3      	LDI  R31,HIGH(1000)
000104 d090      	RCALL __MODW21
000105 01df      	MOVW R26,R30
000106 e6e4      	LDI  R30,LOW(100)
000107 e0f0      	LDI  R31,HIGH(100)
000108 d087      	RCALL __DIVW21
000109 83ec      	STD  Y+4,R30
00010a 83fd      	STD  Y+4+1,R31
                 ; 0000 0099       dahgan=(r%100)/10;
00010b 01d9      	MOVW R26,R18
00010c e6e4      	LDI  R30,LOW(100)
00010d e0f0      	LDI  R31,HIGH(100)
00010e d086      	RCALL __MODW21
00010f 01df      	MOVW R26,R30
000110 e0ea      	LDI  R30,LOW(10)
000111 e0f0      	LDI  R31,HIGH(10)
000112 d07d      	RCALL __DIVW21
000113 83ea      	STD  Y+2,R30
000114 83fb      	STD  Y+2+1,R31
                 ; 0000 009A       yekan=r%10;
000115 01d9      	MOVW R26,R18
000116 e0ea      	LDI  R30,LOW(10)
000117 e0f0      	LDI  R31,HIGH(10)
000118 d07c      	RCALL __MODW21
000119 83e8      	ST   Y,R30
00011a 83f9      	STD  Y+1,R31
                 ; 0000 009B 
                 ; 0000 009C       switch (c)
00011b 01fa      	MOVW R30,R20
                 ; 0000 009D       {
                 ; 0000 009E             case 1:
00011c 30e1      	CPI  R30,LOW(0x1)
00011d e0a0      	LDI  R26,HIGH(0x1)
00011e 07fa      	CPC  R31,R26
00011f f439      	BRNE _0x4F
                 ; 0000 009F                 PORTC.0 = 1; PORTC.1 = 1; PORTC.2 = 1; PORTC.3 = 0;
000120 9aa8      	SBI  0x15,0
000121 9aa9      	SBI  0x15,1
000122 9aaa      	SBI  0x15,2
000123 98ab      	CBI  0x15,3
                 ; 0000 00A0                 PORTD=seg[yekan];
000124 81e8      	LD   R30,Y
000125 81f9      	LDD  R31,Y+1
000126 c020      	RJMP _0x76
                 ; 0000 00A1                 break;
                 ; 0000 00A2 
                 ; 0000 00A3             case 2:
                 _0x4F:
000127 30e2      	CPI  R30,LOW(0x2)
000128 e0a0      	LDI  R26,HIGH(0x2)
000129 07fa      	CPC  R31,R26
00012a f439      	BRNE _0x58
                 ; 0000 00A4                 PORTC.0 = 1; PORTC.1 = 1; PORTC.2 = 0; PORTC.3 = 1;
00012b 9aa8      	SBI  0x15,0
00012c 9aa9      	SBI  0x15,1
00012d 98aa      	CBI  0x15,2
00012e 9aab      	SBI  0x15,3
                 ; 0000 00A5                 PORTD=seg[dahgan];
00012f 81ea      	LDD  R30,Y+2
000130 81fb      	LDD  R31,Y+2+1
000131 c015      	RJMP _0x76
                 ; 0000 00A6                 break;
                 ; 0000 00A7 
                 ; 0000 00A8             case 3:
                 _0x58:
000132 30e3      	CPI  R30,LOW(0x3)
000133 e0a0      	LDI  R26,HIGH(0x3)
000134 07fa      	CPC  R31,R26
000135 f439      	BRNE _0x61
                 ; 0000 00A9                 PORTC.0 = 1; PORTC.1 = 0; PORTC.2 = 1; PORTC.3 = 1;
000136 9aa8      	SBI  0x15,0
000137 98a9      	CBI  0x15,1
000138 9aaa      	SBI  0x15,2
000139 9aab      	SBI  0x15,3
                 ; 0000 00AA                 PORTD=seg[sadgan];
00013a 81ec      	LDD  R30,Y+4
00013b 81fd      	LDD  R31,Y+4+1
00013c c00a      	RJMP _0x76
                 ; 0000 00AB                 break;
                 ; 0000 00AC 
                 ; 0000 00AD             case 4:
                 _0x61:
00013d 30e4      	CPI  R30,LOW(0x4)
00013e e0a0      	LDI  R26,HIGH(0x4)
00013f 07fa      	CPC  R31,R26
000140 f461      	BRNE _0x4E
                 ; 0000 00AE                 PORTC.0 = 0; PORTC.1 = 1; PORTC.2 = 1; PORTC.3 = 1;
000141 98a8      	CBI  0x15,0
000142 9aa9      	SBI  0x15,1
000143 9aaa      	SBI  0x15,2
000144 9aab      	SBI  0x15,3
                 ; 0000 00AF                 PORTD=seg[hezargan];
000145 81ee      	LDD  R30,Y+6
000146 81ff      	LDD  R31,Y+6+1
                 _0x76:
000147 01de      	MOVW R26,R28
000148 9618      	ADIW R26,8
000149 0fae      	ADD  R26,R30
00014a 1fbf      	ADC  R27,R31
00014b 91ec      	LD   R30,X
00014c bbe2      	OUT  0x12,R30
                 ; 0000 00B0                 break;
                 ; 0000 00B1       }
                 _0x4E:
                 ; 0000 00B2       c++;
                +
00014d 5f4f     +SUBI R20 , LOW ( - 1 )
00014e 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
                 ; 0000 00B3       if(c > 4) c = 1;
                +
00014f 3045     +CPI R20 , LOW ( 5 )
000150 e0e0     +LDI R30 , HIGH ( 5 )
000151 075e     +CPC R21 , R30
                 	__CPWRN 20,21,5
000152 f014      	BRLT _0x73
                +
000153 e041     +LDI R20 , LOW ( 1 )
000154 e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
                 ; 0000 00B4     }
                 _0x73:
000155 cf28      	RJMP _0x5
                 ; 0000 00B5 }
                 _0x74:
000156 cfff      	RJMP _0x74
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.ESEG
                 _a:
000000           	.BYTE 0x2
                 
                 	.DSEG
                 __seed_G101:
000160           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
000157 e0a0      	LDI  R26,LOW(_a)
000158 e0b0      	LDI  R27,HIGH(_a)
000159 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
                +
00015a e001     +LDI R16 , LOW ( 1 )
00015b e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
00015c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x2:
00015d e0e1      	LDI  R30,LOW(1)
00015e e0f0      	LDI  R31,HIGH(1)
00015f 17e0      	CP   R30,R16
000160 07f1      	CPC  R31,R17
000161 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
                +
000162 e004     +LDI R16 , LOW ( 4 )
000163 e010     +LDI R17 , HIGH ( 4 )
                 	__GETWRN 16,17,4
000164 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
000165 e0e2      	LDI  R30,LOW(2)
000166 e0f0      	LDI  R31,HIGH(2)
000167 17e0      	CP   R30,R16
000168 07f1      	CPC  R31,R17
000169 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
00016a e0e4      	LDI  R30,LOW(4)
00016b e0f0      	LDI  R31,HIGH(4)
00016c 17e0      	CP   R30,R16
00016d 07f1      	CPC  R31,R17
00016e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
00016f e0e5      	LDI  R30,LOW(5)
000170 e0f0      	LDI  R31,HIGH(5)
000171 17e0      	CP   R30,R16
000172 07f1      	CPC  R31,R17
000173 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000174 dfe2      	RCALL SUBOPT_0x0
000175 d03b      	RCALL __EEPROMRDW
000176 17e2      	CP   R30,R18
000177 07f3      	CPC  R31,R19
000178 9508      	RET
                 
                 
                 	.CSEG
                 __ANEGW1:
000179 95f1      	NEG  R31
00017a 95e1      	NEG  R30
00017b 40f0      	SBCI R31,0
00017c 9508      	RET
                 
                 __DIVW21U:
00017d 2400      	CLR  R0
00017e 2411      	CLR  R1
00017f e190      	LDI  R25,16
                 __DIVW21U1:
000180 0faa      	LSL  R26
000181 1fbb      	ROL  R27
000182 1c00      	ROL  R0
000183 1c11      	ROL  R1
000184 1a0e      	SUB  R0,R30
000185 0a1f      	SBC  R1,R31
000186 f418      	BRCC __DIVW21U2
000187 0e0e      	ADD  R0,R30
000188 1e1f      	ADC  R1,R31
000189 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00018a 60a1      	SBR  R26,1
                 __DIVW21U3:
00018b 959a      	DEC  R25
00018c f799      	BRNE __DIVW21U1
00018d 01fd      	MOVW R30,R26
00018e 01d0      	MOVW R26,R0
00018f 9508      	RET
                 
                 __DIVW21:
000190 d012      	RCALL __CHKSIGNW
000191 dfeb      	RCALL __DIVW21U
000192 f40e      	BRTC __DIVW211
000193 dfe5      	RCALL __ANEGW1
                 __DIVW211:
000194 9508      	RET
                 
                 __MODW21:
000195 94e8      	CLT
000196 ffb7      	SBRS R27,7
000197 c004      	RJMP __MODW211
000198 95a0      	COM  R26
000199 95b0      	COM  R27
00019a 9611      	ADIW R26,1
00019b 9468      	SET
                 __MODW211:
00019c fdf7      	SBRC R31,7
00019d dfdb      	RCALL __ANEGW1
00019e dfde      	RCALL __DIVW21U
00019f 01fd      	MOVW R30,R26
0001a0 f40e      	BRTC __MODW212
0001a1 dfd7      	RCALL __ANEGW1
                 __MODW212:
0001a2 9508      	RET
                 
                 __CHKSIGNW:
0001a3 94e8      	CLT
0001a4 fff7      	SBRS R31,7
0001a5 c002      	RJMP __CHKSW1
0001a6 dfd2      	RCALL __ANEGW1
0001a7 9468      	SET
                 __CHKSW1:
0001a8 ffb7      	SBRS R27,7
0001a9 c006      	RJMP __CHKSW2
0001aa 95a0      	COM  R26
0001ab 95b0      	COM  R27
0001ac 9611      	ADIW R26,1
0001ad f800      	BLD  R0,0
0001ae 9403      	INC  R0
0001af fa00      	BST  R0,0
                 __CHKSW2:
0001b0 9508      	RET
                 
                 __EEPROMRDW:
0001b1 9611      	ADIW R26,1
0001b2 d002      	RCALL __EEPROMRDB
0001b3 2ffe      	MOV  R31,R30
0001b4 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
0001b5 99e1      	SBIC EECR,EEWE
0001b6 cffe      	RJMP __EEPROMRDB
0001b7 93ff      	PUSH R31
0001b8 b7ff      	IN   R31,SREG
0001b9 94f8      	CLI
0001ba bbae      	OUT  EEARL,R26
0001bb bbbf      	OUT  EEARH,R27
0001bc 9ae0      	SBI  EECR,EERE
0001bd b3ed      	IN   R30,EEDR
0001be bfff      	OUT  SREG,R31
0001bf 91ff      	POP  R31
0001c0 9508      	RET
                 
                 __EEPROMWRW:
0001c1 d007      	RCALL __EEPROMWRB
0001c2 9611      	ADIW R26,1
0001c3 93ef      	PUSH R30
0001c4 2fef      	MOV  R30,R31
0001c5 d003      	RCALL __EEPROMWRB
0001c6 91ef      	POP  R30
0001c7 9711      	SBIW R26,1
0001c8 9508      	RET
                 
                 __EEPROMWRB:
0001c9 9be1      	SBIS EECR,EEWE
0001ca c002      	RJMP __EEPROMWRB1
0001cb 95a8      	WDR
0001cc cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
0001cd b79f      	IN   R25,SREG
0001ce 94f8      	CLI
0001cf bbae      	OUT  EEARL,R26
0001d0 bbbf      	OUT  EEARH,R27
0001d1 9ae0      	SBI  EECR,EERE
0001d2 b38d      	IN   R24,EEDR
0001d3 17e8      	CP   R30,R24
0001d4 f019      	BREQ __EEPROMWRB0
0001d5 bbed      	OUT  EEDR,R30
0001d6 9ae2      	SBI  EECR,EEMWE
0001d7 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
0001d8 bf9f      	OUT  SREG,R25
0001d9 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
0001da 0fac      	ADD  R26,R28
0001db 1fbd      	ADC  R27,R29
                 __INITLOC0:
0001dc 9005      	LPM  R0,Z+
0001dd 920d      	ST   X+,R0
0001de 958a      	DEC  R24
0001df f7e1      	BRNE __INITLOC0
0001e0 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8A register use summary:
r0 :  20 r1 :   5 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  11 r17:  11 r18:  13 r19:   8 r20:   5 r21:   4 r22:   2 r23:   0 
r24:  11 r25:   6 r26:  40 r27:  13 r28:   4 r29:   2 r30:  82 r31:  49 
x  :   5 y  :  16 z  :   8 
Registers used: 20 out of 35 (57.1%)

ATmega8A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   3 
adiw  :   5 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   2 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   2 brmi  :   0 brne  :  22 brpl  :   0 brsh  :   2 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 cbi   :   7 
cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 clr   :   6 
cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 cp    :   9 
cpc   :  15 cpi   :   7 cpse  :   0 dec   :   3 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   4 
inc   :   1 ld    :   2 ldd   :   7 ldi   :  79 lds   :   0 lpm   :   8 
lsl   :   1 lsr   :   0 mov   :   2 movw  :  15 mul   :   0 muls  :   0 
mulsu :   0 neg   :   2 nop   :   0 or    :   0 ori   :   0 out   :  20 
pop   :   2 push  :   2 rcall :  51 ret   :  17 reti  :   0 rjmp  :  62 
rol   :   3 ror   :   0 sbc   :   1 sbci  :   4 sbi   :  23 sbic  :   5 
sbis  :  12 sbiw  :   6 sbr   :   1 sbrc  :   1 sbrs  :   3 sec   :   0 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   2 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :   5 std   :   7 
sts   :   0 sub   :   1 subi  :   3 swap  :   0 tst   :   0 wdr   :   1 

Instructions used: 52 out of 114 (45.6%)

ATmega8A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003c2    906     56    962    8192  11.7%
[.dseg] 0x000060 0x000164      0      4      4    1024   0.4%
[.eseg] 0x000000 0x000002      0      2      2     512   0.4%

Assembly complete, 0 errors, 2 warnings
